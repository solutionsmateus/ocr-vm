name: ocr-vm

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
  schedule:
    - cron: '0 9 * * *'  # Agendado para rodar todos os dias às 9:00 UTC (6:00 no seu fuso)

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: read # Alterado para 'read', pois a ação de upload não precisa de permissão de escrita no repo
    env:
      OUTPUT_DIR: ${{ github.workspace }}/Encartes
      HTTP_UA: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/5.0 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36

    steps:
      - name: Checkout (repo atual)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ajustes Git no Windows (opcional)
        shell: pwsh
        run: |
          git config --global user.name "user"
          git config --global user.email "usermail10@gmail.com"
          git config --global core.longpaths true

      - name: Setup Python 3.12 (com cache pip)
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: requirements.txt

      - name: Instalar dependências
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Garantir pasta de saída (Encartes)
        shell: pwsh
        run: New-Item -ItemType Directory -Force -Path "$env:OUTPUT_DIR" | Out-Null

      - name: Listar arquivos (debug)
        shell: pwsh
        run: |
          Write-Host "Estrutura de pastas após o checkout:"
          Get-ChildItem -Recurse -Depth 2

      - name: Baixar Artifacts com Todos os arquivos.
        if: always()
        uses: actions/download-artifact@v4
        with:
          name: artifacts
          if-no-files-found: warn
          path: ./workflow-github-action

      - name: Verificar arquivos gerados (debug)
        shell: pwsh
        run: |
          Write-Host "Verificando conteúdo da pasta de saída: $env:OUTPUT_DIR"
          if (Test-Path "$env:OUTPUT_DIR") {
            $files = Get-ChildItem "$env:OUTPUT_DIR" -Recurse -File
            $count = ($files | Measure-Object).Count
            Write-Host "Total de arquivos em OUTPUT_DIR: $count"
            $files | Select-Object FullName, Length
          }

      - name: Run Script with Gemini API
        shell: pwsh
        run: pyhon.exe app.py
         